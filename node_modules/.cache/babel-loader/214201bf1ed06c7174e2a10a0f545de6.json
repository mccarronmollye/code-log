{"ast":null,"code":"import logs from '../apis/logs';\nexport const getLogs = () => {\n  return dispatch => {\n    dispatch({\n      type: \"LOADING_LOGS\"\n    });\n    return fetch('/logs').then(resp => resp.json()).then(logs => dispatch({\n      type: \"LOADED_LOGS\",\n      payload: logs\n    }));\n  };\n}; //return function (dispatch)\n//dispatch action to start the loading proccess\n// return fetch url\n//get response\n//dispatch data\n\nexport const addLog = (log, history) => {\n  return dispatch => {\n    return fetch('/logs', {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        log\n      })\n    }).then(resp => resp.json()).then(log => {\n      dispatch({\n        type: \"ADD_LOG\",\n        log\n      });\n      history.push('/logs');\n    });\n  };\n};\nexport const deleteLog = log => {\n  return dispatch => {\n    return fetch(\"/logs\", {\n      method: \"DELETE\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        log\n      })\n    }).then(resp => resp.json()).then(log => dispatch({\n      type: \"DELETE_LOG\",\n      log\n    }));\n  };\n};\nexport const updateLog = log => {\n  return dispatch => {\n    return fetch(\"/logs/\".concat(log.id), {\n      method: \"PUT\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        log\n      })\n    }).then(resp => resp.json()).then(log => dispatch({\n      type: \"EDIT_LOG\",\n      log\n    }));\n  };\n};\nexport const fetchLog = id => async dispatch => {\n  const response = await logs.get(\"logs/\".concat(id));\n  dispatch({\n    type: 'FETCH_LOG',\n    payload: response.data\n  });\n};","map":{"version":3,"sources":["/Users/mollymccarron/Development/projects/code-log/client/src/actions/index.js"],"names":["logs","getLogs","dispatch","type","fetch","then","resp","json","payload","addLog","log","history","method","headers","body","JSON","stringify","push","deleteLog","updateLog","id","fetchLog","response","get","data"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,cAAjB;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAM;AAC3B,SAAOC,QAAQ,IAAI;AACjBA,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAE;AAAP,KAAD,CAAR;AACA,WAAOC,KAAK,CAAC,OAAD,CAAL,CACJC,IADI,CACCC,IAAI,IAAIA,IAAI,CAACC,IAAL,EADT,EAEJF,IAFI,CAECL,IAAI,IAAIE,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAE,aAAP;AAAsBK,MAAAA,OAAO,EAAER;AAA/B,KAAD,CAFjB,CAAP;AAGD,GALD;AAMD,CAPM,C,CASP;AACE;AACA;AACE;AACA;;AAGJ,OAAO,MAAMS,MAAM,GAAG,CAACC,GAAD,EAAMC,OAAN,KAAkB;AACtC,SAAOT,QAAQ,IAAI;AACjB,WAAOE,KAAK,CAAC,OAAD,EAAU;AACpBQ,MAAAA,MAAM,EAAE,MADY;AAEpBC,MAAAA,OAAO,EAAE;AAAC,wBAAe;AAAhB,OAFW;AAGpBC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACN,QAAAA;AAAD,OAAf;AAHc,KAAV,CAAL,CAIJL,IAJI,CAICC,IAAI,IAAIA,IAAI,CAACC,IAAL,EAJT,EAKJF,IALI,CAKCK,GAAG,IAAI;AACTR,MAAAA,QAAQ,CAAC;AAACC,QAAAA,IAAI,EAAE,SAAP;AAAkBO,QAAAA;AAAlB,OAAD,CAAR;AACAC,MAAAA,OAAO,CAACM,IAAR,CAAa,OAAb;AACH,KARI,CAAP;AAUD,GAXD;AAYD,CAbM;AAeP,OAAO,MAAMC,SAAS,GAAIR,GAAD,IAAS;AAChC,SAAOR,QAAQ,IAAI;AACjB,WAAOE,KAAK,UAAU;AACpBQ,MAAAA,MAAM,EAAE,QADY;AAEpBC,MAAAA,OAAO,EAAE;AAAC,wBAAe;AAAhB,OAFW;AAGpBC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACN,QAAAA;AAAD,OAAf;AAHc,KAAV,CAAL,CAIJL,IAJI,CAICC,IAAI,IAAIA,IAAI,CAACC,IAAL,EAJT,EAKJF,IALI,CAKCK,GAAG,IAAIR,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAE,YAAP;AAAqBO,MAAAA;AAArB,KAAD,CALhB,CAAP;AAMD,GAPD;AAQD,CATM;AAWP,OAAO,MAAMS,SAAS,GAAIT,GAAD,IAAS;AAChC,SAAOR,QAAQ,IAAI;AACjB,WAAOE,KAAK,iBAAUM,GAAG,CAACU,EAAd,GAAoB;AAC9BR,MAAAA,MAAM,EAAE,KADsB;AAE9BC,MAAAA,OAAO,EAAE;AAAC,wBAAe;AAAhB,OAFqB;AAG9BC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACN,QAAAA;AAAD,OAAf;AAHwB,KAApB,CAAL,CAIJL,IAJI,CAICC,IAAI,IAAIA,IAAI,CAACC,IAAL,EAJT,EAKJF,IALI,CAKCK,GAAG,IAAIR,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAE,UAAP;AAAmBO,MAAAA;AAAnB,KAAD,CALhB,CAAP;AAMD,GAPD;AAQD,CATM;AAWP,OAAO,MAAMW,QAAQ,GAAID,EAAD,IAAQ,MAAMlB,QAAN,IAAkB;AAChD,QAAMoB,QAAQ,GAAG,MAAMtB,IAAI,CAACuB,GAAL,gBAAiBH,EAAjB,EAAvB;AAEAlB,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAE,WAAR;AAAqBK,IAAAA,OAAO,EAAEc,QAAQ,CAACE;AAAvC,GAAD,CAAR;AACD,CAJM","sourcesContent":["import logs from '../apis/logs'\n\nexport const getLogs = () => {\n  return dispatch => {\n    dispatch({type: \"LOADING_LOGS\"});\n    return fetch('/logs')\n      .then(resp => resp.json())\n      .then(logs => dispatch({type: \"LOADED_LOGS\", payload: logs}))\n  }\n}\n\n//return function (dispatch)\n  //dispatch action to start the loading proccess\n  // return fetch url\n    //get response\n    //dispatch data\n\n\nexport const addLog = (log, history) => {\n  return dispatch => {\n    return fetch('/logs', {\n      method: \"POST\",\n      headers: {'Content-Type':'application/json'},\n      body: JSON.stringify({log})\n    }).then(resp => resp.json())\n      .then(log => {\n          dispatch({type: \"ADD_LOG\", log})\n          history.push('/logs')\n      }\n    )\n  }\n}\n\nexport const deleteLog = (log) => {\n  return dispatch => {\n    return fetch(`/logs`, {\n      method: \"DELETE\",\n      headers: {'Content-Type':'application/json'},\n      body: JSON.stringify({log})\n    }).then(resp => resp.json())\n      .then(log => dispatch({type: \"DELETE_LOG\", log}))\n  }\n}\n\nexport const updateLog = (log) => {\n  return dispatch => {\n    return fetch(`/logs/${log.id}`, {\n      method: \"PUT\",\n      headers: {'Content-Type':'application/json'},\n      body: JSON.stringify({log})\n    }).then(resp => resp.json())\n      .then(log => dispatch({type: \"EDIT_LOG\", log}))\n  }\n}\n\nexport const fetchLog = (id) => async dispatch => {\n  const response = await logs.get(`logs/${id}`)\n\n  dispatch({ type: 'FETCH_LOG', payload: response.data})\n}\n"]},"metadata":{},"sourceType":"module"}